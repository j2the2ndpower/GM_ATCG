<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();
uiBubbleSprite=noone;
uiSpriteScale=0;       //must leave this at 0
uiSpriteIndex=0;
uiTextValue='';
uiBubblePos=0;  //0=bottom left default, clockwise 1,2,3
uiTextPosX=10;  //added to x .  Text will be centered
uiTextPosY=10;
uiTextWidth=sprite_width*0.80;  //80% of bubble width
uiTextHeight=sprite_height*0.80;
uiKillPress=true;  //default if user presses bubble it will fade and destory;
uiAutoDestroy=true;  //will kill the button after time;  factor
uiCloseFactor=1;   //if autoclose will use # of characters in string * factor;
uiAutoSize=true;   //this will adjust the bubble size based on the uiMemo;
uiAlign=fa_center;
canfocus=false;
uiBubbleWidth=sprite_width;
uiBubbleMin=50;
uiFadeOnKill=true;   //default is to fade or to popdown...





uiDrawBackColor=true;
uiBackColor=c_white;
uiBackColor2=c_black;
uiTextColor=c_black;
canfocus=false;
curLB = instance_create(x,y,ui_label);
curLB.uiVisible=false;


bubbleh=-1;   //internal button height;
last_st='';  //last value of textvalue;
alpha_destroy=false;
drawX=x;
drawY=y;


curZoomFactor=1;
curAlpha=1;
curRot=0;















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if curLB != noone {with (curLB) instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(1); //fade_out and destroy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiTextValue != '' {event_user(0);}

if uiVisible==false &amp;&amp; alpha_destroy  { instance_destroy();}



    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiKillPress {event_user(1);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call when we need to resize

if uiBubbleSprite != noone
  {
    xratio=sprite_width/sprite_get_width(uiBubbleSprite);
    yratio=sprite_height/sprite_get_height(uiBubbleSprite);
    uiTextPosX=(sprite_get_bbox_left(uiBubbleSprite)*xratio);
    uiTextPosY=(sprite_get_bbox_top(uiBubbleSprite)*yratio);
    uiTextWidth=(sprite_get_bbox_right(uiBubbleSprite)*xratio)-uiTextPosX;
    uiTextHeight=(sprite_get_bbox_bottom(uiBubbleSprite)*yratio)-uiTextPosY;
    uiTextPosX +=drawX;
    uiTextPosY +=drawY;
    
  } 
else
  {
  uiTextPosX=drawX+10;  //added to x .  Text will be centered
  uiTextPosY=drawY+10;
  uiTextWidth=sprite_width-20;  //80% of bubble width
  uiTextHeight=sprite_height-20;    
  }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade out and destroy
alpha_destroy=true;
if uiFadeOnKill {uiFadeOut=true;} else {uiPopDown=true;};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawn when uiTextValue is changed.

var hc,ym;

if uiAutoSize {if sprite_width != uiBubbleWidth { image_xscale=uiBubbleWidth/sprite_get_width(sprite_index); }      }

drawX=xstart;
drawY=ystart;




//use bounding box for text output

var xratio,yratio;


event_user(11);  //inherited called when possible resize!

event_user(2); //get resize.... 

with (curLB) 
  {
        uiAlign=other.uiAlign; 
        uiFont=other.uiFont;
        uiTextColor=other.uiTextColor;
        uiBackColor=other.uiBackColor;
        uiTextValue=other.uiTextValue;
        uiDrawBackColor=false;
        depth=other.depth-1;
        uiCenterWrap=false;
        uiAnchor=other.id;
        uiAnchorPos=false;  
        x=other.uiTextPosX;
        y=other.uiTextPosY;
        image_xscale=other.uiTextWidth / sprite_get_width(sprite_index);
        event_user(1);
        uiMemo='';
        
  }

ym=0;   //y center margin    
hc=0;
if curLB.uiCurHeight &lt;=uiTextHeight  //center
   {
     ym= (uiTextHeight-curLB.uiCurHeight) div 2;
     curLB.y +=ym;
   }
else //need to streched y scale to fit    
     {    
        var rat=sprite_height/uiTextHeight;
        hc=(curLB.uiCurHeight-uiTextHeight);  //height change
        if (uiTextHeight+hc)&lt;uiBubbleMin hc=uiBubbleMin-uiTextHeight;  //set min
        uiTextHeight +=hc;
       
        image_yscale=(sprite_height+(hc*rat)) / sprite_get_height(sprite_index);       
        event_user(2);  //we rescale;
        ym= (uiTextHeight-curLB.uiCurHeight) div 2;   
     }

      

switch (uiBubblePos)
{          case 0  : curLB.y = (drawY-sprite_height)+(uiTextPosY-drawY)+ym ;  break;
           case 1  : curLB.y = (drawY+sprite_height)-(uiTextPosY-drawY)-uiTextHeight+ym; break; //curLB.y += sprite_height ; break;           
           case 2  : curLB.x = drawX-(uiTextPosX-drawX)-uiTextWidth;curLB.y=(drawY+sprite_height)-(uiTextPosY-drawY)-uiTextHeight+ym;break;
           case 3  : curLB.x = drawX-(uiTextPosX-drawX)-uiTextWidth;curLB.y = (drawY-sprite_height)+(uiTextPosY-drawY)+ym; break;
}      


last_st=uiTextValue;  
uiTextValue='';

curLB.xstart=curLB.x;  //for animation
curLB.ystart=curLB.y;  


if uiAutoDestroy {alarm[0]=max(30,(string_length(last_st)*uiCloseFactor));};  //close if set
      
      
      
      




  


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if curLB != noone {with (curLB) instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


var ymargin,disptx,px,py,zx,zy,ymir,xmir;

event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     

disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);




curZoomFactor=uiZoomFactor+uiAniPulse;
curAlpha=uiAlpha-uiAniFading;
curRot=uiAngle+uiAniWobble;


curLB.uiAniPulse=uiAniPulse;
curLB.uiAniFading=uiAniFading;



zx=0;zy=0;  
px=0;py=0;          


if curZoomFactor != 1
   {  zx =    (sprite_width - (sprite_width * curZoomFactor)) div 2 ;
      zy =    (sprite_height - (sprite_height * curZoomFactor)) div 2 ;         

   }
   
curLB.y=curLB.ystart+zy;
   

if (uiDrawBackColor) &amp;&amp; (uiBubbleSprite==noone)
   {
    drawX=px;drawY=py;
    switch (uiBubblePos)
          {
           case 0  : drawY=y-sprite_height;y=ystart-sprite_height; break;
           case 2  : drawX-=sprite_width;x=xstart-sprite_width;break;
           case 3  : drawX-=sprite_width;drawY-=sprite_height;x=xstart-sprite_width;y=ystart-sprite_height;break;
          }       

    if (uiCustomDrawBack != noone)
         {
          script_execute(uiCustomDrawBack,x+zx, y+zy, x+zx+(sprite_width*curZoomFactor), y+zy+(sprite_height*curZoomFactor),uiBackColor,uiBackColor2);    
         }   
     else 
       {draw_roundrect_color_ext(x+zx+3, y+zy+3, x+zx+3+(sprite_width*curZoomFactor), y+zy+3+(sprite_height*curZoomFactor), uiRadiusX,uiRadiusY,uiBackColor2,uiBackColor2, false);   //fill background        
        draw_roundrect_color_ext(x+zx, y+zy, x+zx+(sprite_width*curZoomFactor), y+zy+(sprite_height*curZoomFactor), uiRadiusX,uiRadiusY,uiBackColor,uiBackColor, false);   //fill        
       }
   } 

 
   

if uiBubbleSprite != noone
     {
     xmir=1;ymir=1;
     curRot=0;
     switch (uiBubblePos)
          {
           case 0  : py-=sprite_height;y=ystart-sprite_height; break;
           case 1  : ymir=-1; py+=sprite_height;zy*=-1; break;
           case 2  : ymir=-1;xmir=-1;py+=sprite_height;x=xstart-sprite_width;zx*=-1;zy*=-1; break;
           case 3  : xmir=-1;py-=sprite_height;x=xstart-sprite_width;y=ystart-sprite_height;zx*=-1;break;
          }    
     xmir=xmir*curZoomFactor;
     ymir=ymir*curZoomFactor;     
     draw_sprite_ext( uiBubbleSprite, uiSpriteIndex, drawX+px+zx,drawY+py+zy, (sprite_width/sprite_get_width(uiBubbleSprite))*xmir, (sprite_height/sprite_get_height(uiBubbleSprite))*ymir, curRot, image_blend, curAlpha );
     }                 
       







</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
