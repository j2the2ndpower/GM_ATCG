<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();

items[0]='Items Not Set';
itemindex=-1;



numlines = 0;      //number of lines.
mouse_move = false;
mouse_movex = false;   //weather we are moving left-right.
mouse_pressedy=0;
mouse_pressedx=0;
mouse_origy = 0;
mouse_time = 0;
mouse_click = false;
first_press = false; //for mouse first press and direction
rubbery = 30 ; //number of pixels to rubberband in y
rubberx = 30 ; //number of pixels to rubberband in x
rubberbanding = false; //if we are rubberbanding then dont process mouse.
bandstep = 0;
groupheight = 0;  //height of report in pixels.
viewheight = sprite_height;  //viewable height
topclip = 0;  //line in room that is top position;
bottom=false;  //use to determine if report is showing last item currently.
bottomline = 0 ;  //will determine the drawy bottomline;
topstart=0;
left_margin = 5;
lineheight = 24;  //this should be textheight....
totheight = 1;
line_clicked = -1; //index of selected item;
drawy=0;
drawx=x;
startline=0;
flicked = 0;  //if was swiped then set flicked 
noscroll=false;
uiDrawLines=true;
uiDrawHeader=true;
uiDrawSquare=false;  //whether to draw rounded or square..default is rounded.
uiComboID=noone;  //set to the instance id of combo object id. for callback.
uiMemo='';
uiDrawHilite=true;
uiCredits=false;
uiCustomDrawScript=-1;
uiScrollArrows=true;
uiScrollColor=c_dkgray;
curArrowPulse=1;
curArrowSpeed=0.05;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiMemo !='' then  //memo set so we break apart string to items list
   {  event_user(1); 
      uiMemo='';  //resets so only called once.
   }



if flicked != 0 then //we need to flick...
 {
 if rubberbanding==false
   {
    drawy+=flicked * 0.10;
    flicked=flicked * 0.90;
   } else flicked=0;
 if abs(flicked)&lt;=5 flicked=0;  
 }

 
if (mouse_move==false &amp;&amp; uiCredits)  //scroll credits;
   {
     drawy=drawy- 0.6;
     if drawy&lt;=bottomline then 
        {drawy=0;
         exit;
        }        
   } 
 
if (mouse_move==false &amp;&amp; drawy&gt;0)
    { if rubberbanding ==false {rubberbanding = true;                     
                                bandstep = ((drawy) div 6) +2 ;
                                }
      if drawy&gt;0 drawy-=bandstep;
      if drawy &lt;=0 then { drawy=0;
                          rubberbanding=false;
                          flicked=0;
                        }  
    } 
    
if (mouse_move==false &amp;&amp; drawy&lt;bottomline &amp;&amp; noscroll=false)
    {    
       if rubberbanding ==false {rubberbanding = true;                     
                                 bandstep =abs( ( (drawy-bottomline) div 6))+2;
                                }
       if drawy&lt;bottomline drawy+=bandstep;
       if drawy&gt;=bottomline then 
                       { 
                        drawy=bottomline;
                        rubberbanding=false;
                        flicked=0;
                       } 
   
    } 

if (drawy&lt; (bottomline-(sprite_height div 3)) &amp;&amp; mouse_move) event_user(0);
if (drawy&gt; (sprite_height div 3) &amp;&amp; mouse_move) event_user(0);                               
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if noscroll then exit;
if position_meeting(mouse_x,mouse_y,self)
{
drawy=drawy - (sprite_height div 10);
if drawy&lt; (bottomline-(sprite_height div 3)) event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if noscroll then exit;
if position_meeting(mouse_x,mouse_y,self)
{
drawy=drawy + (sprite_height div 10);
if drawy&gt; (sprite_height div 3) event_user(0);  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if mouse_move then event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

event_user(0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

event_inherited();


//if rubberbanding exit; 

if mouse_move exit;
   else {mouse_pressedy=mouse_y;
         mouse_pressedx=mouse_x;
         mouse_move=true;        
         first_press=true; 
         mouse_origy=mouse_y; //to determine if it is a click or move.
         mouse_click=false;
         flicked=0;
         mouse_time = get_timer();
        }
        
       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if (mouse_move &amp;&amp; noscroll==false)
                  { drawy= drawy + (mouse_y - mouse_pressedy);
                    mouse_pressedy = mouse_y;
                    mouse_pressedx = mouse_x;
                  }      

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///break apart memo string
var curx,curword, curline, curst,fx;

draw_set_font(uiFont);

curx = 0;
curst=uiMemo;
uiMemo='';   //resets it so that we only call this event once!
curword='';
curline='';
fx=1;
items=0;  //reset items array
drawy=0;  //reset top pos
lastchar='';
while string_length(curst)&gt;fx
 {
 linebreak=false;
 //grab a word (repeat until ' ');
 curchar=string_char_at(curst,fx);
  while 1
     { 
       if (curchar != ' ') &amp;&amp; (curchar != chr(13)) &amp;&amp; (curchar != chr(10)) &amp;&amp; (curchar != '#')
           {curword = curword + curchar;}
       fx=fx+1;
       if fx&gt;string_length(curst) break;
       lastchar=curchar;
       curchar=string_char_at(curst,fx);       
       if (curchar== chr(10)) 
                           {  linebreak=true;                                  
                              break;
                           }                                                                                                 
       if (curchar== '#') {  if (lastchar != '\') {
                                                    linebreak=true;
                                                    break;
                                                  } 
                             else curword =curword+'#';
                          }   
       if (curchar==' ') break;                              
                                                
     }
  curword=curword+' ';
     
  if (string_width(curline)+string_width(' '+curword)&lt;sprite_width -3)
    {curline=curline+curword;
     curword='';
    }  
    else {  //if line too long we append and create new string.
          items[curx]=curline;
          curx=curx+1;
          curline=curword;
         }
    
  if linebreak  //if chr(10) or '#'
    {
     items[curx]=curline;
     curx=curx+1;
     curline='';
    }
  curword='';            
 }
 
if curline !='' {items[curx]=curline;}


draw_set_font(uiFont);
numitems=array_length_1d(items);
lineheight=string_height('XgpT')*uiYscale + 5;
totheight=numitems * lineheight;  //info only for other controls.



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse lifted or moved off control

var evNum;
var flicktime;

mouse_move=false;
mouse_movex=false;
first_press=false;
//if startline==0 drawy=0;
rubberbanding=false;

//see if it is a click
if (abs (mouse_y - mouse_origy) &lt; 15) // &amp;&amp; mouse_y &gt;= y)  //a click not a move
    {mouse_click=true;
    itemindex = ((mouse_origy-y-drawy) div lineheight)-1;
    if uiDrawHeader==false itemindex +=1;  //if draw header then add one to itemselected.
    if itemindex&gt;array_length_1d(items)-1 then itemindex=array_length_1d(items)-1;
    if itemindex&lt;0 itemindex=0;
    //process event...
    evNum=uiEventNum;   
    if uiEventObject != noone
     if object_exists(uiEventObject) then
          with (uiEventObject) {if evNum&gt;=0 event_user(evNum);}
          
    if uiComboID &gt;= 0      
       if instance_exists(uiComboID) then                        //for combo drop down list...
         with (uiComboID) {if evNum&gt;=0 event_user(evNum);}
          
    soundindex=1; //click
    event_user(10); //process sound event;   
   
    }  
else //see if it was a quick swipe...flicked!                              
   { 
   if noscroll exit;  //disregard if no scrolling
   flicktime= (get_timer()-mouse_time)/1000;
//   if flicktime &lt; 160 then flicked=400-flicktime;
   if flicktime &lt; 160 then flicked=abs( (50-flicktime) + (3 * abs(mouse_y - mouse_origy)));
   if (mouse_y - mouse_origy)&lt;0 flicked=flicked* -1;   
   }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


var disptx,px,numitems,fx,cury,th;

event_inherited();

numitems=array_length_1d(items);

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


lineheight=string_height('XgpT')*uiYscale + 5;

totheight=numitems * lineheight;  //info only for other controls.

if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming   


th=lineheight;

bottomline=((numitems*lineheight)-sprite_height) * -1;  //top drawy line for bottom clip.

if uiDrawHeader 
   {
      if bottomline &gt;= th {noscroll=true}
         else 
         {   //enabled scrolling...
               noscroll=false;
               bottomline = bottomline - (th *2) ; //bottom clip takes up a line.          
             }        
   }
else 
   {
      if bottomline &gt;= 0 {noscroll=true}
         else 
         {   //enabled scrolling...
               noscroll=false;
               bottomline = bottomline - (th *1) ; //bottom clip takes up a line.          
         }               
   }   
   
   
if uiDrawSquare { uiRadiusX=0;uiRadiusY=0;}


if uiDrawBackColor    //draw background
   {
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,uiBackColor,uiBackColor, false);   //fill
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,uiBorderBackColor,uiBorderBackColor, true);   //draw outline    
   } 

   
   

draw_set_halign(uiAlign);


if uiDrawHeader cury=drawy+th; else cury=drawy;   

if uiCustomDrawScript = -1  //default drawing (not custom)
  for (fx=0;fx&lt;numitems;fx+=1)    //go through each item in the list;
  {  
   disptx=items[fx];  
  
      
   while (string_width(disptx+'X') * uiXscale) &gt; (sprite_width)   //clip strings if they are too long
     { 
        disptx=string_delete(disptx,string_length(disptx),1);
        if string_length(disptx)&lt;2 break;
     }

     
  if uiAlign==fa_left { px=x +5; } 
   else if uiAlign==fa_middle {px= x + (sprite_width div 2); }
   else if uiAlign==fa_right {px = x+sprite_width -5; } 

   draw_set_color(uiTextColor);  


   if (cury &gt;=0) then  //if line visible;
    {
     if (itemindex==fx) &amp;&amp; (uiDrawHilite==true)       //if hilited item
         {// draw_set_color(uiHiliteBackColor);
           draw_rectangle_color(x, y+cury, x+sprite_width-1, y+cury+th,uiHiliteBackColor,uiHiliteBackColor2,uiHiliteBackColor,uiHiliteBackColor2,false);   //fill hilite;
           draw_set_color(uiHiliteColor);  //set text color  
         }

    draw_text_transformed(px,y+cury+2,disptx,uiXscale,uiYscale,0);     
    
    if uiShowArrows draw_sprite(sprite_index,3, x+sprite_width - 40,y+cury);
    
    if (itemindex!=fx) &amp;&amp; uiDrawLines then  // draw lines between items
      {
         draw_set_color(uiBorderBackColor);
         draw_line_width(x,y+cury+th,x+sprite_width,y+cury+th,1);    
      } 
    }  
   
  cury+=th;
  if noscroll {if (cury)&gt;(sprite_height) break;}
       else {if (cury)&gt;(sprite_height-th) break;}
  }  //for each item of default drawing;

if uiCustomDrawScript != -1  //Custom Drawing;
   for (fx=0;fx&lt;numitems;fx+=1)    //go through each item in the list;
   {
    if cury&gt;=0  //if visible
     {
     script_execute(uiCustomDrawScript,self.id,fx,x,y+cury,th);
     }
   //cury+=lineheight; 
   cury+=th;  //only allow fixed heights in text drawing (not surfaces)
   if noscroll {if (cury)&gt;(sprite_height) break;}
     else {if (cury)&gt;(sprite_height-th) break;}
   }




//draw bottom clip


//draw header with uiTextLabel
if uiDrawHeader
{
draw_roundrect_color_ext(x, y, x+sprite_width, y+th, uiRadiusX,uiRadiusY,uiBorderBackColor,uiBorderBackColor, false);   //fill
}

//draw uiTextLabel centered.
draw_set_color(uiBorderColor);
px= x + (sprite_width div 2);
draw_set_halign(fa_center);
if uiTextLabel !='' draw_text_transformed(px,y+2,uiTextLabel,uiXscale,uiYscale,0);  

if (noscroll==false)  //scrolling;
  {
     draw_roundrect_color_ext(x, y+sprite_height-th, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,uiBorderBackColor,uiBorderBackColor, false);   //fill
  }   
  
if (noscroll==false) &amp;&amp; (uiScrollArrows=true)  
   { curArrowPulse += curArrowSpeed;
     if curArrowPulse &gt; 1 {curArrowSpeed *= -1;}
        else if curArrowPulse &lt; 0.3 {curArrowSpeed *= -1;}          
     if drawy&lt;0 draw_sprite_ext(sprite_index,5,x+sprite_width-40,y+2,1,1,0,uiScrollColor,curArrowPulse);
     if drawy&gt;bottomline draw_sprite_ext(sprite_index,4,x+sprite_width-40,y+sprite_height-30,1,1,0,uiScrollColor,curArrowPulse);              
   }  








</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
