<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();

uiPath=-1;
uiPathSpeed=0;
uiPathAbsolute=false;  //follow absolute path or relative path....
uiTypeSpeed=3;
uiAniStart=0;       //just show textart
uiAniDuration=30;
uiAniEnd=0;        //just stop showing


uiAlignV=fa_middle;
uiAlign=fa_center;
uiAlignAni=fa_center;    //usually draw text aligned within control

CurDispText='';
CurStartIndex=1;  //first char in string;
CurInMotion = false;
CurCanDraw = false;
CurAnimated = false;

uiCArray='';
uiCArrayXpos=0;
uiCArrayYpos=0;
uiCArrayRot=0;
uiCArrayZoom=0;
uiCArrayAlpha=0;
uiCArrayColor=0;

//animate stuffs
CurWobble=0;
CurPulse=1;
CurFading=1;
CurSparkle=0;
CurTextWobble=0;
CurTypeIndex=1;
CurAniCounter=1;    //counter for step animation...
uiTextFixed=false;
uiTextEffect=0;  //defaults to same on all chars  1=alternate 2=random;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CurAniCounter +=1;

if uiAnimated
  { uiAnimated=false;
    event_user(0);  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fx,ch;

CurDispText=uiTextValue;
CurStartIndex=1; 
CurTypeIndex=1;
  
      if uiPath != -1 
       {path_start(uiPath,uiPathSpeed,2,uiPathAbsolute);
        if uiPathSpeed==0 {path_position=0.0005;}
        CurInMotion=true;}      
       
//clear all arrays
       
uiCArray=0;
uiCArrayXpos=0;
uiCArrayYpos=0;
uiCArrayRot=0;
uiCArrayZoom=0;
uiCArrayAlpha=0;       
uiCArrayColor=0;

for (fx=1;fx&lt;=string_length(CurDispText);fx+=1)
  {
   uiCArray[fx]=string_char_at(CurDispText,fx);
   uiCArrayXpos[fx]=0;
   uiCArrayYpos[fx]=0;
   uiCArrayRot[fx]=0;
   uiCArrayZoom[fx]=uiXscale;
   uiCArrayAlpha[fx]=uiAlpha;                
   uiCArrayColor[fx]=uiTextColor;
   
  }
  
  
CurCanDraw=true;  //can show now...

if (uiWobble != 0) || (uiPulse != 0) || (uiFading != 0)
     {CurAnimated=true;} else {CurAnimated=false;}



       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tw;

tw=string_length(CurDispText);

     
if (CurStartIndex&lt;=tw)
    { //path_position=0.005;
      path_position=0.005;
      if uiPathSpeed&lt;0 CurStartIndex +=1;  //start on next character (disappearing text to left).
    } else {path_position=0;
            CurInMotion=false; 
            path_end();}
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tw,dc,c1, stepx,curp, fx,px,ymargin, curx, cury, angx, angy, ta;

event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     


draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(uiAlignV);



draw_set_color(uiTextColor);

tw=string_length(CurDispText);
if tw==0 exit;

if CurCanDraw==false exit; //arrays not setup yet....

if CurAnimated 
{
     if uiWobble != 0 
          {  
          CurWobble += uiWobbleSpeed;
          if CurWobble &gt; uiWobble  {uiWobbleSpeed *= -1;}                                       
          else if CurWobble &lt; (uiWobble * -1)  {uiWobbleSpeed *= -1;}
          }    
          
     if uiPulse != 0
         {
          CurPulse += uiPulseSpeed;
          if CurPulse &gt; 1+(uiPulse) {uiPulseSpeed *= -1;}
          else if CurPulse &lt; 1-(uiPulse) {uiPulseSpeed *= -1;}          
         } 
         
     if uiFading != 0
         {
          CurFading += uiFadingSpeed;
          if CurFading &gt; 1 {uiFadingSpeed *= -1;}
          else if CurFading &lt; 1-(uiFading) {uiFadingSpeed *= -1;}          
         }             
  

  

    
}     //if has animated things like pulse, fading, etc...
    

if uiFadeOut CurFading=(1-uiAlpha);
  
if CurInMotion      //if moving along a path...
 {
    stepx= 1 / tw ; 
    curp=path_position+(uiPathSpeed/10000);

    angx = path_get_x(path_index,curp-0.0005);
    angy = path_get_y(path_index,curp-0.0005);
  
         
    for (fx=CurStartIndex;fx&lt;=tw;fx+=1)
     {
      curx=path_get_x(path_index,curp);
      cury=path_get_y(path_index,curp);
      dc = uiCArray[fx];
      curp += (string_width(dc)*uiCArrayZoom[fx]) / path_get_length(path_index);
      angx=path_get_x(path_index,curp);
      angy=path_get_y(path_index,curp);
      ta = point_direction(curx,cury,angx, angy); //get angle
      uiCArrayXpos[fx]=curx;
      uiCArrayYpos[fx]=cury;
      uiCArrayRot[fx]=ta;
     }
    
 }  else //nopath assigned
 {     
       ymargin= (sprite_height - (string_height(CurDispText) * uiYscale)) div 2 ;
       px=x;
       if uiAlignAni==fa_left { px=x +5; } 
         else if uiAlignAni==fa_center {px= x + (( sprite_width-(string_width(CurDispText) * uiYscale)) div 2); }
            else if uiAlignAni==fa_right {px = x + sprite_width - (string_width(CurDispText) * uiYscale) -8; } 
       curp=px;
       for (fx=CurStartIndex;fx&lt;=tw;fx+=1)
            {
                   dc = uiCArray[fx];
                   uiCArrayXpos[fx]=curp;
                   uiCArrayYpos[fx]=y+ymargin;
                   curp += ceil(string_width(dc)*uiCArrayZoom[fx]);
            } 
 
 }  //no path assigned;
 
 
 
 
if uiTextEffect&gt;=0
{ 
if uiTextEffect==0  //do same on all text;
    { 
      for (fx=1;fx&lt;=tw;fx+=1)  // apply to all characters same;
       {  if uiWobble != 0 uiCArrayRot[fx]+=CurWobble;
          if uiFading != 0 uiCArrayAlpha[fx]=CurFading;
          if uiPulse != 0 uiCArrayZoom[fx]=CurPulse;
       }  
    }  else
if uiTextEffect==1  //alternate on each char;
    { 
      for (fx=1;fx&lt;=tw;fx+=2)  // apply to all characters same;
       {  if uiWobble != 0 uiCArrayRot[fx]=CurWobble;
          if uiFading != 0 uiCArrayAlpha[fx]=CurFading;
          if uiPulse != 0 uiCArrayZoom[fx]=CurPulse;
       }  
      for (fx=2;fx&lt;=tw;fx+=2)  // apply to all characters same;
       {  if uiWobble != 0 uiCArrayRot[fx]=CurWobble * -1;
          if uiFading != 0 uiCArrayAlpha[fx]=1+ (uiFading -CurFading);
          if uiPulse != 0 uiCArrayZoom[fx]=1+(1-CurPulse);
       }  
       
    } else
if uiTextEffect==2  //alternate on each word on space;
    { c1=1;
      for (fx=1;fx&lt;=tw;fx+=1) 
       { 
        if uiCArray[fx]=' ' c1=c1*-1;  //if space then alternate....
        if c1&gt;0
         {
          if uiWobble != 0 uiCArrayRot[fx]=CurWobble;
          if uiFading != 0 uiCArrayAlpha[fx]=CurFading;
          if uiPulse != 0 uiCArrayZoom[fx]=CurPulse;
         } else 
         {  if uiWobble != 0 uiCArrayRot[fx]=CurWobble * -1;
          if uiFading != 0 uiCArrayAlpha[fx]=CurFading;
          if uiPulse != 0 uiCArrayZoom[fx]=1+(1-CurPulse);
         }  
       }
     } else
if uiTextEffect==3  //Type Keypress effect;
    { 
      if (CurAniCounter mod (room_speed div uiTypeSpeed))==1 CurTypeIndex+=1;
      for (fx=1;fx&lt;=tw;fx+=1)  // apply to all characters same;
       {   if fx&gt;=CurTypeIndex {uiCArrayAlpha[fx]=0} else {uiCArrayAlpha[fx]=1;}
       }
    }
    
}    
  
//use alpha for keyboard typewriter effect...


 for (fx=CurStartIndex;fx&lt;=tw;fx+=1)  //draw each character individually...
     {
      c1=uiCArrayColor[fx];
      if uiFadeOut uiCArrayAlpha[fx]=uiAlpha;
      draw_text_transformed_color(uiCArrayXpos[fx],uiCArrayYpos[fx],uiCArray[fx],uiCArrayZoom[fx], uiCArrayZoom[fx], uiCArrayRot[fx], c1, c1, c1, c1, uiCArrayAlpha[fx]); 
     } 
 
 
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
