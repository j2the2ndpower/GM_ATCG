<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();
uiDrawBackColor=true;
uiBackColor=c_silver;


uiValue=100;  //percent based 100....so 50 is 0 percent, use to read-only , use uiSetValue to set!!!
uiBarColor=c_green;
uiBarColorBlend=c_lime;
uiBarLevel=35;
uiBarColor2=c_yellow;
uiBarColorBlend2=c_white;

uiBarLevel2=10;
uiBarColor3=c_red;
uiBarColorBlend3=c_maroon;

uiBarFlash=15; //0=no flash,  else speed to flash flash on level3 (dying...);
uiDrawSquare=false; //rounded or rectange;
uiAniDraw=true; //animate the movement....not jump to position
uiAniSpeed=1;   //step added to value.
uiBarSprite=noone;
uiBackSprite=noone;
uiSpriteScale = 1.0;


uiSetValue=-1;  //use this to set the value...don't access...percent based 100....

curValueMove=0;  //used to set the movement in change....
curValue=-1;      //used to set movement
curAniCounter=0;











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


var ymargin,disptx,px,curPercent,barWidth,flashDraw,curColor,curBlendColor,ch,cw,tw,barx,bary,barw,barh,xratio,yratio;

event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     

disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);

if uiDrawSquare {uiRadiusX=0;uiRadiusY=0;}

barx=x;
bary=y;
barw=sprite_width;
barh=sprite_height;

if uiBackSprite != noone  //if we are using a background sprite behind/around the gauge, we use bounding box to get gauge location/size
  {
   if uiSpriteScale==0 {   xratio=sprite_width/sprite_get_width(uiBackSprite);
                           yratio=sprite_height/sprite_get_height(uiBackSprite);
                       } else
                       {   xratio=uiSpriteScale;
                           yratio=uiSpriteScale;
                       }         
    barx=(sprite_get_bbox_left(uiBackSprite)*xratio);
    bary=(sprite_get_bbox_top(uiBackSprite)*yratio);
    barw=(sprite_get_bbox_right(uiBackSprite)*xratio)-barx;
    barh=(sprite_get_bbox_bottom(uiBackSprite)*yratio)-bary;    
    barr=(sprite_get_bbox_bottom(uiBackSprite)-sprite_get_bbox_top(uiBackSprite));  //original bar height
    barx+=x;
    bary+=y;
  } 
  
if uiDrawBackColor 
   {
    draw_roundrect_color_ext(barx, bary, barx+barw, bary+barh, uiRadiusX,uiRadiusY,uiBackColor,uiBackColor,false);   //fill
   } 
   

if uiSetValue != -1      //if changed then set the bar in motion.....
  {  
  if uiAniDraw  //animate motion of bar 
   {
    if curValue != -1   //init value check
     {curValueMove = uiSetValue - curValue;}
     else {curValue=uiSetValue;}   //on first set set don't animate....?
     uiValue=uiSetValue;
     uiSetValue=-1;  
   } else   //no animation
     {
     curValue=uiSetValue;
     uiValue=uiSetValue;
     uiSetValue=-1;
     curValueMove=0;
     }  
  }   
   
if curValue==-1 curValue=uiValue;   //initialize;
  
curPercent=curValue;

if curValueMove &gt; 0 
   {curPercent += min(curValueMove,uiAniSpeed);
    curValueMove -= uiAniSpeed;
    if curValueMove &lt;0 curValueMove=0;    
   }
else if curValueMove &lt;0 
   {curPercent -= min(abs(curValueMove),uiAniSpeed);
    curValueMove += uiAniSpeed;
    if curValueMove &gt;0 curValueMove=0;    
   }

curValue=curPercent;


barWidth:=round((curValue/100) * barw);


drawFlash=true;
if curValue&gt;=uiBarLevel {curColor=uiBarColor; curColorBlend=uiBarColorBlend;}
  else if curValue&gt;=uiBarLevel2 {curColor=uiBarColor2; curColorBlend=uiBarColorBlend2;}
    else { if uiBarFlash&gt;0 {if (curAniCounter mod uiBarFlash)== 1  drawFlash=false;}
           curColor=uiBarColor3;
           curColorBlend=uiBarColorBlend3;
           curAniCounter +=1;
         }  


//draw_text_transformed(px+5,y,disptx,uiXscale,uiYscale,0);   

if uiBackSprite!=noone then
   {
       if uiSpriteScale==0  {
                             draw_sprite_stretched_ext(uiBackSprite,0,x,y,sprite_width,sprite_height,image_blend,uiAlpha);         
                            }  //stretch image to fit.
       else draw_sprite_stretched_ext(uiBackSprite,0,x,y,(sprite_get_width(uiBackSprite)*uiSpriteScale),(sprite_get_height(uiBackSprite)*uiSpriteScale),image_blend,uiAlpha);
   }  


if (uiBarSprite != noone) //drawing background sprite
   {
     cw=sprite_get_width(uiBarSprite);
     ch=sprite_get_height(uiBarSprite);
     
     draw_sprite_stretched_ext(uiBarSprite,0,barx,bary,cw,barh,c_gray,0.5);
     draw_sprite_stretched_ext(uiBarSprite,1,barx+cw,bary,barw-cw-cw,barh,c_gray,0.5);
     draw_sprite_stretched_ext(uiBarSprite,2,barx+barw-cw,bary,cw,barh,c_gray,0.5);
     
     if drawFlash 
     {
      if barWidth&gt;(cw*2)
       {
          draw_sprite_stretched_ext(uiBarSprite,0,barx,bary,cw,barh,curColor,1);
          draw_sprite_stretched_ext(uiBarSprite,1,barx+cw,bary,barWidth-cw-cw,barh,curColor,1);
          draw_sprite_stretched_ext(uiBarSprite,2,barx+barWidth-cw,bary,cw,barh,curColor,1);
       }
      else  {
          tw=max(barWidth div 2,0); //draw /merge left/right sprites.
          if tw&gt;0
             {         
                 draw_sprite_part_ext(uiBarSprite,0,0,0,tw,ch,barx,bary,1,barh/ch,curColor,1);
                 draw_sprite_part_ext(uiBarSprite,2,cw-tw,0,cw-(cw-tw)-1,ch,barx+tw,bary,1,barh/ch,curColor,1);          
             }  
           }       
     } //draw flash;      
   }


if (curValue&gt;0 ) &amp;&amp; (drawFlash) &amp;&amp; (uiBarSprite=noone)
 {
   draw_roundrect_color_ext(barx, bary, barx+barWidth, bary+barh, uiRadiusX,uiRadiusY,curColor,curColor, false);   //fill
 }      
 
if uiDrawBackColor  //draw border
  {
    draw_roundrect_color_ext(barx, bary, barx+barw, bary+barh, uiRadiusX,uiRadiusY,uiBorderColor,uiBorderColor, true);   //fill 
  }     
  
 
  
  
  
  
  
    

       

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
