<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>123321</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();

uiBackColor = c_navy;
uiBackColor2 = c_blue;
uiDrawRectangle=false;
uiPanelSprite = -1;
uiSpriteIndex=0;
uiSpriteScale = 1.0;
uiSetModal=false;
canfocus=false;



//save states of children or when panel is the uiAnchor of object;
OldEnabled=-1;   //-1 init, 0 = false, 1 = true
OldVisible=-1;   
whatchanged=0;  //0=nothing, 1= enabled= 2 = visible

array_ids=0;       //store id's of children
array_Enabled=0;   //stores enabled of children (uiAnchor parent);
array_Visible=0;   //stores visible of children

panelfocused=false;



















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize state checking
if OldEnabled==-1 OldEnabled=uiEnabled;
if OldVisible==-1 OldVisible=uiVisible;

if (OldEnabled != uiEnabled)
    {
       OldEnabled=uiEnabled;                           
       if uiEnabled == false
            {  whatchanged=1;  //enabled flag
               event_user(1);  //save states and visible;                                                                             
            }
       else { whatchanged=1;
              event_user(2); //restore on uiEnabled = true;
            }    
    }

    //if visible flag changed....
    
if (OldVisible != uiVisible)
    {
       OldVisible=uiVisible;                           
       if uiVisible == false
            {  whatchanged=2;  //
               event_user(1);  //save states and visible;                                                                             
            }
       else { whatchanged=2;
              event_user(2); //restore on uiVisible = true;
            }    
    }        
    
if (uiSetModal) &amp;&amp; (panelfocused==false)
     { event_user(3); //disable all controls underneath;
       panelfocused=true;
     }    
else if (uiSetModal==false) &amp;&amp; (panelfocused)
    {
      event_user(4);
      panelfocused=false;    
    }
     
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restore mouse controls underneath panel.


with ui_defaults 
  {
      if (uiAnchor != other.id) uiMouseHandle=true;  
  }
 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///will disable all mouse controls beneath panel;

with ui_defaults 
  {
      if (uiAnchor != other.id) uiMouseHandle=false;  
  }
 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///called to restore states of children

//uses variable whatchanged to determine what array to restore;

var fx,curInst;

if whatchanged==0 exit; //failsafe;


fx=0;

for (fx=0;fx&lt;array_length_1d(array_ids);fx+=1)
   {
     if instance_exists(array_ids[fx])   //see if instance id is still around
        with (array_ids[fx])  
          {
            if other.whatchanged==1 uiEnabled=other.array_Enabled[fx];
            else if other.whatchanged==2 uiVisible=other.array_Visible[fx];          
          }
   }

array_ids=0;   //clear array_ids
if whatchanged==1 array_Enabled=0;  //reset array
if whatchanged==2 array_Visible=0;  //reset array  


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///called to save states of children

//uses variable whatchanged to determine what array to save.

var fx,curid;

if whatchanged==0 exit; //failsafe;

array_ids=0;   //clear array_ids

fx=0;
with ui_defaults do  //assign array of ids
  {      
     if uiAnchor == other.id {  other.array_ids[fx]=id;
                                if other.whatchanged==1 
                                      {  other.array_Enabled[fx]=uiEnabled;
                                         uiEnabled=other.uiEnabled;
                                      }   
                                 else if other.whatchanged==2 
                                                { other.array_Visible[fx]=uiVisible;
                                                  uiVisible=other.uiVisible;
                                                }   
                                 fx +=1;
                             }      
  }
  

  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/



var ymargin,disptx,px,py;

event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming    


disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


px=x;
py=y;

if uiDrawRectangle { uiRadiusX=0;uiRadiusY=0;}

if (uiDrawBackColor)  
   {
    draw_set_color(uiBackColor);  
    if uiBackColor2==0 uiBackColor2=uiBackColor;
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY, uiBackColor,uiBackColor2,uiDrawOutline);   //fill
       
    px=x+2;  //need to set drawing sprite inside the rectangle.
    py=y+2;   
   } 
   
if uiPanelSprite&gt;=0 then
   {
       if uiSpriteScale==0  {
                             draw_sprite_stretched_ext(uiPanelSprite,uiSpriteIndex,px,py,sprite_width-(px-x),sprite_height-(py-y),image_blend,uiAlpha);         
                            }  //stretch image to fit.
       else draw_sprite_stretched_ext(uiPanelSprite,uiSpriteIndex,px,py,(sprite_get_width(uiPanelSprite)*uiSpriteScale),(sprite_get_height(uiPanelSprite)*uiSpriteScale),image_blend,uiAlpha);
   }   
      
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
