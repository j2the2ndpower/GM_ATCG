<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/

uiTextValue="";
uiTextLabel="";
uiBackColor= c_white;
uiDrawBackColor = true;
uiTextColor= c_black;
uiDrawOutline = false;   //fill button when drawing.
uiBorderColor=c_white;
uiBorderBackColor=c_gray;
uiHiliteColor=c_white;
uiHiliteBackColor=c_blue;
uiHiliteBackColor2=c_navy;
uiAlign = fa_left;
uiAlignV = fa_top;
uiFont = font_ui;
uiXscale = 1.0;
uiYscale = 1.0;
uiButtonList = false;  //if set then control is a button list and will send button to eventobj
uiShowArrows = false;
uiEventObject = noone;  //-4 constant
uiEventNum = 0;    //default event is just to call the statechanged on controller object if set
uiControlName = '';
uiMultiSelect = false;
uiAnchor = noone;
uiMoveX=0;
uiMoveY=0;
uiAniMove=false;  //start moving
uiAniX=0;    //don't change
uiAniY=0;    //don't change
uiAniSpeed=0.85;
checked = false;  //default state of checkbox;
modified = false;
inForm=false;
uiDrawSelf=false;
uiPasswordChar='';    //should not change this as default.
uitextboxmsg = -1;    //should not be changed....used for dialon on textboxes.
uiFadeIn=false;
uiFadeOut=false;
uiFadeSpeed=0.8;
uiAlpha=1;
uiImageBlend=c_white;
uiOrigXscale=image_xscale;
uiOrigYscale=image_yscale;
uiOrigWidth=sprite_width;
uiOrigHeight=sprite_height;
uiMouseHandle=true;   //if item overlap then we only process on one control.
uiRefresh=false;      //this will cause all comboboxes to close for now....
uiFocusID=noone;         //instance that has focus used on refresh;
uiZoomIn=false;
uiZoomOut=false;
uiZoomSpeed=0.5;
uiZoomFactor=1;
uiEnabled=true;
uiVisible=true;
isFocused=false;   //weather its in focus




//v1.01 added 
//animate stuffs
uiAnimated=false;
uiWobble=0;
uiWobbleSpeed=1;
uiPulse=0;
uiPulseSpeed=0.01;
uiPulseJello=false; //works with pulse to jello the pulse...
uiFading=0;
uiFadingSpeed=0.03;
uiSparkle=0;
uiSparkleSpeed=1;
uiTextWobble=0;
uiTextWobbleSpeed=1;
uiHoverMode=1;
uiHoverColor=c_dkgray;
uiHoverInfo=0.8;
uiGlowing=0;



draw_set_circle_precision(32);



//v1.2 added
uiAnchorProps=true;   //used to determin if enabled/visible are set for children.

//v1.3 added
uiTabOrder=-1;        //for tab order
uiAssignKey=0;       //to assign a key to buttons/etc...
uiSetWidth=-1;
uiSetHeight=-1;
uiTag=-1;            //free to use for custom stuffs
canfocus=true;       //if control can grab focus 
uiGUIWidth=room_width;
uiGUIHeight=room_height;


//v1.4 added
uiCallBackSound=false;         //if want to do more complex sound/haptic then use this and then set the sounds to custom_scripts;
uiClickSound=-1;              //if not using callback, you can set your snd_xxx here.
soundindex=-1;                 //don't touch this....
uiAnchorPos=true;              //if anchor children take the xpos/ypos changes...
uiCurWidth=sprite_width;
uiCurHeight=sprite_height;
uiCustomDrawBack=noone;       //if you want to draw a custom background on panel, listbox, etc.


//default ease
uiEaseType=25;                 //type of ease based on JQuery Easing Plugin
uiEaseDur=30;                  // steps

uiEaseMoveType=40;             //movement animation type of ease based on JQuery Easing Plugin
uiEaseMoveDur=30;              // steps
uiEaseWobbleType=31;            //Wobble animation type of ease based on JQuery Easing Plugin
uiEaseWobbleDur=40;            // steps
uiEasePulseType=36;             //Pulse Animation type of ease based on JQuery Easing Plugin

uiEasePulseDur=40;             // steps
uiEaseFadeType=0;              // for Fade/glowing Animation type of ease based on JQuery Easing Plugin
uiEaseFadeDur=50;              // steps

uiEaseCurTime=0;               // current time  don't need to set
uiEaseStart=0;                 // beginning value
uiEaseEnd=1  ;                 // ending value
uiEaseCurValue=1;              // CurValueofEase
inEase=false;                  // internal flag
EaseKind=-1;                   // internal type

uiAniWobble=0;                 // animation wobble;
uiAniPulse=0;                  // animation zoom/pulse
uiAniFading=0;                 // animation fading
CurFading=0;                   // used for hovering;
uiAniDrawGlow=false;           // hover glowing
isHovering = false;            // hover status on widget
uiCanHover=false;              // used for hovering;
uiAngle=0;                     // for all widgets to store angle.
uiRadiusX=15;
uiRadiusY=15;
uiPopUp=false;                 //animation for popup.
uiPopDown=false;               //animation for popdown.
curHoverZoom=0;                //hoverzoom factor
backalpha=1;
inAnimation=false;
uiVisibleChild=true;
uiEnabledChild=true;
uiClickOnChar=chr(1);            //will press button/control if keypress
uiDestroy=-1;                    //fill fadeout &amp; destory instance on steps, for splash labels and such...
killonfade=false;                //internal flag don't touch... 







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (ui_ani_control)  //remove any animation objects on this widget
  {  if EaseControl==other.id {instance_destroy();}
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///used for uiDestroy,  like fadeout splash type labels...
uiFadeOut=true;
killonfade=true;  //flag to kill on fadeout...

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if inForm==false exit;
if canfocus==false exit;

//if we click anywhere on room that isn't a ui_component then we refresh all active objects when inForm==true;

var inst;

inst=instance_position(mouse_x, mouse_y, ui_defaults);
if inst=noone {
    with (ui_defaults) do 
                 {
                  isFocused=false;
                  uiFocusID=noone; //will set the focus object.
                  uiRefresh=true;   //will refersh all ui (close comboboxes for example)...
                 } 
              }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if inForm==false exit;
if canfocus==false exit;

if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;


var curID;


curID=self.id;

with (ui_defaults)
  {
    uiFocusID=curID;                      //will set the focus object.
    isFocused=false;
    uiRefresh=true;   //will refersh all ui (close comboboxes for example)...
  }

isFocused=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create ease object for animation

var tmp;


tmp=instance_create(-1,-1,ui_ani_control);

tmp.EaseKind=EaseKind;  //set type of ease  (0=movement, 1=zoom, 2=pulse,3=wobble...etc)

with (tmp) {event_user(2);}      //set defaults; for that ease

tmp.EaseControl=self.id;  //set link to this control


tmp.EaseType=uiEaseType;
tmp.EaseCurTime=uiEaseCurTime;                // current time  don't need to set
tmp.EaseStart=uiEaseStart;                 // beginning value
tmp.EaseEnd=uiEaseEnd  ;                 // ending value
tmp.EaseDur=uiEaseDur;                  // steps
tmp.EaseCurValue=uiEaseCurValue;              // CurValueofEase
tmp.depth=depth-1;  //put in front for some ani's
tmp.StartEase=true;  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///for resizing in code

if uiSetWidth != -1  {   uiOrigXscale=uiSetWidth/sprite_get_width(sprite_index);   
                         uiOrigWidth=uiSetWidth;
                         uiCurWidth=uiSetWidth;
                         uiSetWidth=-1;
                         image_xscale = uiOrigXscale;
                     }                     

if uiSetHeight != -1 {   uiOrigYscale=uiSetHeight/sprite_get_height(sprite_index);   
                         uiOrigHeight=uiSetHeight;
                         uiCurHeight=uiSetHeight;
                         uiSetHeight=-1;
                         image_yscale= uiOrigYscale;
                     }   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound controls....

// This determines if we need to do simple sound click on click,  or we process the more advanced
//  sound by calling the uiClickSound custom function with soundindex as the argument0;

//sound index
//  1 : on left pressed      //this is only one that doesn't support callback
//  2 : on Move Start;       //only callback future
//  3 : on Move End;         //only callback future
//  4 : scrolling            //only callback future

if uiClickSound==-1 { exit; } //not set;

if uiCallBackSound==false
    {
      if soundindex==1 {audio_play_sound(uiClickSound,1,false);}              
    }
else
    {
      if script_exists(uiClickSound) script_execute(uiClickSound,soundindex);
    }      


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiAniDrawGlow
{
                CurFading += uiFadingSpeed;
                if CurFading &gt; max(0.6,uiGlowing) { CurFading=max(0.6,uiGlowing); uiFadingSpeed *= -1;}
                else if CurFading &lt; 0.1 { CurFading=0.1; uiFadingSpeed *= -1;}          
                draw_set_alpha(CurFading);
                draw_set_blend_mode(bm_add);
                draw_ellipse_color(x, y, x+sprite_width, y+sprite_height, c_white, c_black, false);
                draw_set_blend_mode(bm_normal); 
                draw_set_alpha(uiAlpha);
}       

draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc          
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/

if (uiAniMove) {  EaseKind=0;  //set animation to movement;
                  uiEaseType=uiEaseMoveType;
                  uiEaseDur=uiEaseMoveDur;
                  event_user(12);
                  uiAniMove=false;                  
               }   
               
if (uiAnimated) &amp;&amp; (inAnimation=false)
                 {
                 if uiWobble!=0   //wobble is active, create animation
                    {
                        EaseKind=3;
                        uiEaseType=uiEaseWobbleType;
                        uiEaseDur=uiEaseWobbleDur;               
                        event_user(12);                                        
                    }  
                 if uiPulse!=0   //pulse is active, create animation
                    {
                        EaseKind=2;
                        uiEaseType=uiEasePulseType;
                        uiEaseDur=uiEasePulseDur;               
                        event_user(12);                                        
                    }  
                 if uiFading!=0   //fading is active, create animation
                    {
                        EaseKind=4;
                        uiEaseType=uiEaseFadeType;
                        uiEaseDur=uiEaseFadeDur;               
                        event_user(12);                                        
                    }                 
                 if uiGlowing!=0   //fading is active, create animation
                    {
                        EaseKind=6;
                        uiEaseType=uiEaseFadeType;
                        uiEaseDur=uiEaseFadeDur;               
                        event_user(12);                                        
                    }                                     
                 if uiSparkle!=0 //sparkle active, create animation      
                    {
                        EaseKind=5;
                        event_user(12);                                        
                    }                 
                    
                                   
                 inAnimation=true;
                }               
   
if (uiAnimated==false) &amp;&amp; (inAnimation=true) //stop animations
     {
     with (ui_ani_control)  //remove any animation objects on this widget
         {  if EaseControl==other.id {instance_destroy();} } 
     inAnimation=false;
     }              
               
if uiFadeIn 
     {                                                    //fadein
       if uiAlpha &lt;=1
            {  uiAlpha=uiAlpha+(0.1 * uiFadeSpeed);
               uiVisible=true;
               if uiAlpha &gt;0.98 then {     uiAlpha=1;
                                           uiFadeIn=false;
                                     } 
            } 
     }          

if (uiFadeOut &amp;&amp; uiFadeIn==false)
   {  if uiAlpha &gt;=0
            {  uiAlpha=uiAlpha - (0.1 * uiFadeSpeed);
               if uiAlpha &lt;0.02 then {      uiAlpha=0;
                                            uiFadeOut=false;
                                            uiVisible=false;
                                            if killonfade instance_destroy();
                                     } 
               
            } 
   }         
   

    
backalpha=draw_get_alpha();  //restore alpha after draw (drawend)
       
if (uiEnabled==false) || (uiMouseHandle==false) {draw_set_alpha(0.5);} 
     else draw_set_alpha(uiAlpha);  
            


      
if uiSetWidth != -1  {   uiOrigXscale=uiSetWidth/sprite_get_width(sprite_index);   
                         uiOrigWidth=uiSetWidth;
                         uiCurWidth=uiSetWidth;
                         uiSetWidth=-1;
                         image_xscale = uiOrigXscale;
                     }                     

if uiSetHeight != -1 {   uiOrigYscale=uiSetHeight/sprite_get_height(sprite_index);   
                         uiOrigHeight=uiSetHeight;
                         uiCurHeight=uiSetHeight;
                         uiSetHeight=-1;
                         image_yscale= uiOrigYscale;
                     }   
      
                    
if uiZoomOut
   if uiZoomFactor != 0.1
          {  uiZoomFactor= uiZoomFactor * uiZoomSpeed;   
             if uiZoomFactor &lt;= 0.1  {
                                      uiZoomOut=false;               
                                      uiZoomFactor=0.1;
                                     }        
          }    
  
          
if uiPopUp
    {
     uiVisible=true;                   
     EaseKind=7;  //popup zoom
     uiEaseType=30;//37;
     uiEaseDur=30;               
     event_user(12);                                        
     uiPopUp=false;
    }  
if uiPopDown
    {
     EaseKind=8;  //popdown zoom
     uiEaseType=29;
     uiEaseDur=30;               
     event_user(12);                                        
     uiPopDown=false;
    }  
    
                      
if uiZoomIn
   if uiZoomFactor &lt;= 1
          {  uiZoomFactor= uiZoomFactor * (1/uiZoomSpeed);   
             if uiZoomFactor &gt;= 1    {                       //reset to zoom 1
                                      uiZoomIn=false;               
                                      uiZoomFactor=1;
                                      image_xscale = uiOrigXscale * (uiZoomFactor);
                                      image_yscale = uiOrigYscale * (uiZoomFactor);
                                     }        
          }        
      

if (uiAnchor != noone)  //has a parent
   {  
    if uiAnchorPos  //grab relative position of parent
     { 
      x = xstart + ( (uiAnchor).x - (uiAnchor).xstart );
      y = ystart + ( (uiAnchor).y - (uiAnchor).ystart );   
     } 
      uiAlpha=uiAnchor.uiAlpha;   //set alpha for fadein/out effect   
      uiZoomFactor=uiAnchor.uiZoomFactor;  //sets same zoomout/in
      uiAniPulse=uiAnchor.uiAniPulse;
      uiAniFading=uiAniFading;
     if uiAnchorProps     //sets childrens enabled/visible by default.
        { uiEnabled=uiAnchor.uiEnabled &amp;&amp; uiEnabledChild;  
          uiVisible=uiAnchor.uiVisible &amp;&amp; uiVisibleChild;
        }  
     if (depth&gt;=uiAnchor.depth) {depth=uiAnchor.depth-1;}  //children always ahead of parents.
   }
   
  
          
if uiZoomFactor != 1
   {
      image_xscale = uiOrigXscale * (uiZoomFactor);
      image_yscale = uiOrigYscale * (uiZoomFactor);
   }   
                
if (uiHoverMode&gt;0) &amp;&amp; (uiEnabled)  &amp;&amp; (uiCanHover)
  {  
      if position_meeting(mouse_x,mouse_y,self.id)            
       { if isHovering=false {  //first hover
                                isHovering=true;
       
                                if uiHoverMode==1   //hove color mode        
                                   { uiAniFading=1-uiHoverInfo;
                                     uiImageBlend=uiHoverColor;
                                   } else
                                 if uiHoverMode==2  
                                   { EaseKind=9;  //hover zoom in
                                     uiEaseType=37;
                                     uiEaseDur=10;               
                                     event_user(12);                                        
                                   } else
                                 if uiHoverMode==3   //glow affect
                                   {
                                    uiAniDrawGlow=true;
                                   }                                      
                             }
                                   
        } else if isHovering //if we moved off a hovering control;
                {isHovering=false;  //mouseover 
                 curHoverZoom=0;    //reset hoverzoom if applicable    
                 uiAniFading=0;
                 uiImageBlend=c_white;   
                 uiAniDrawGlow=false;
                 if uiHoverMode==2
                    { EaseKind=10;  //hover zoom out
                      uiEaseType=34;
                      uiEaseDur=10;               
                      event_user(12);
                    }                                                           
                }
                
                
                               
  }//if hovermode   
                                      
   
if uiDestroy&gt;=0 {alarm[11]=uiDestroy;   //auto kill        
                 uiDestroy=-1;
                }  
   
if uiDrawSelf then { image_uiXscale=1;
                     image_uiYscale=1; 
                     draw_self();   //allow gms sprites and code as well....     
                   }  
   
           
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

//handle clickonchar feature,  emulate mouse press/release if character is pressed

if string_lower(keyboard_lastchar)==string_lower(uiClickOnChar)  //if keypressed the same as click, then simulate press
    {
    keyboard_lastchar= '';
    event_perform(ev_mouse, ev_left_press);
    event_perform(ev_mouse, ev_left_release);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
