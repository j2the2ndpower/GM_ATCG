<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();

var fx;

//uiScreenSpace=0.45;  //take 45% of screen on pop-up

uiBackColor = c_blue;
uiBackColor2 = c_navy;
uiDrawBackColor=true;
uiSetDepth=-99999;



uiRowStartX[1]=10;
uiRowStartY[1]=1;
uiRowSpacingX[1]=0;
uiRow[1]='qwertyuiop';
uiRowShift[1]='QWERTYUIOP';
uiRowAlt[1]='1234567890';

uiRowStartX[2]=30;
uiRowStartY[2]=1;
uiRowSpacingX[2]=0;
uiRow[2]='asdfghjkl';
uiRowShift[2]='ASDFGHJKL';
uiRowAlt[2]='!@$%&amp;-+()';

uiRowStartX[3]=130;
uiRowStartY[3]=1;
uiRowSpacingX[3]=0;
uiRow[3]='zxcvbnm,.';
uiRowShift[3]='ZXCVBNM&lt;&gt;';
uiRowAlt[3]= "[]~\/:;'"+'"_=?';

uiRowStartY[4]=1;

uiBackStr='';
uiStateStr='?123';
uiStateStrAlt='ABC';
uiEnterStr='';  //we use sprite index spr_ui
uiShiftStr='';  //we use sprite index spr_ui
uiHideStr='';

uiKeyboardShow=false;
uiKeyboardHide=false;


numkeys=0;
boardw=-1;  


numkeys=string_length(uiRow[1])+string_length(uiRow[2])+string_length(uiRow[3]);

//create letter keys
for (fx=0;fx&lt;numkeys;fx+=1) 
      {
        buttons[fx]=instance_create(-100,-100,ui_button_ani);
      }  


shift_key=instance_create(-100,-100,ui_button_ani);
space_key=instance_create(-100,-100,ui_button_ani);
state_key=instance_create(-100,-100,ui_button_ani);
back_key =instance_create(-100,-100,ui_button_ani);
enter_key=instance_create(-100,-100,ui_button_ani);
hide_key=instance_create(-100,-100,ui_button_ani);


 
curState=0;   //0 = normal ; 1= shift; 2=alt
linespacing=5;
keyboard_width=800;    //fixed ratio do not change
uiKeyboardHeight=270;   //height of keyboard
canfocus=false;  
cap_lock=false;
yfc=0;
xfc=0;
boardy=0;
boardh=0;
butheight=0;
butwidth=0;
isHiding=false; //called when hiding
guiSlide=0;
last_stime=0;  //last shift time for caplocks;


//key colors
uiKeyBackColor=c_silver;
uiKeyBackColor2=c_silver;
uiKeyTextColor=c_black;
uiKeyDownColor=c_yellow;

//special keys
uiSKeyBackColor=c_dkgray;
uiSKeyBackColor2=c_dkgray;
uiSKeyTextColor=c_yellow;
uiSKeyDownColor=c_teal;    

initkeys=true;
//uiEaseMoveType=11;   //straight animation movement;
uiEaseMoveType=40;   //straight animation movement;

uiEaseMoveDur=20;   //quicker
uiTouchKey=true;    //this should be on for mobile, will draw a large keypanel on keypress above finger...
uiBackScale=0.85;    //scale for keyboard button draw,  smaller draw but keypress area is larger area.
uiKeySprite=noone;
uiKeySpriteScale=0.8;

//device_mouse_dbclick_enable(false);   if you are on mobile you should use this for entire game!  it will disable right-click on dbl-click























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(5); //destroy all intances
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 
if initkeys {
             initkeys=false;
             event_user(1);  //create button locations
             exit;
            } 
            
if uiKeyboardShow { uiKeyboardShow=false;
                    if uiVisible=false event_user(4); //show keyboard;
                    exit;
                  }                                  
if uiKeyboardHide { uiKeyboardHide=false;
                    if uiVisible event_user(2); //hide keyboard;
                    exit;
                  }              

if uiVisible=false exit;

if uiRefresh { uiRefresh=false;
               if uiFocusID==noone {event_user(2);exit;} //html bug
               if (object_get_name(uiFocusID.object_index) != 'ui_editbox') //&amp;&amp; (isHiding=false)
                {event_user(2);}
                
             }   
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///process eventobject when enter pressed
var evNum;
evNum=uiEventNum;
if uiEventObject != noone
  with (uiEventObject) 
   {if evNum&gt;=0 event_user(evNum);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy memory

var fx;

for (fx=0;fx&lt;numkeys;fx+=1)
    {  with (buttons[fx])  {instance_destroy();} }

with (shift_key) {instance_destroy();};
with (space_key) {instance_destroy();};
with (state_key) {instance_destroy();};
with (back_key)  {instance_destroy();};
with (enter_key) {instance_destroy();};
with (hide_key) {instance_destroy();};
    
          
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show keyboard event
if uiVisible exit;


var fx,fy,fs,fl,fh,fc,ft,curx,cury,curchar;

if uiFocusID.ystart&gt;boardy
 {
    guiSlide=(boardy-(uiFocusID.ystart))+uiFocusID.sprite_height+(50*yfc);   
    with (ui_defaults)
     {
        uiMoveY=ystart-other.guiSlide;
        uiMoveX=x;
        uiAniMove=true;   
     }
 }    


//check to see if we are overlapping any other componets, if so then disable the mouse handle
     var l,t;
      l=ds_list_create();
      while 1{
        t = collision_rectangle(0,boardy+guiSlide,uiGUIWidth,boardy+guiSlide+boardh, ui_defaults, false, true);
        if t{ ds_list_add(l,t);
              instance_deactivate_object(t);
              t.uiMouseHandle=false;             //re-enable mouse handler;
            }
        else break;
             }
           
      for(t=0;t&lt;ds_list_size(l);t+=1)
        { instance_activate_object(ds_list_find_value(l,t)); }
      ds_list_destroy(l);
      
uiVisible=true;
uiMoveY=boardy;
uiAniMove=true;
uiFadeIn=true;
isHiding=false;
if curState != 1 {curState=0;  //leave caplocks but not alt
                  cap_lock=false;  
                  shift_key.drawpress=false;
                  
                  }
event_user(3); //refresh keys




      


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///refresh keys...like shift pressed

var fx,fy,fs,fl,fh,fc,ft,curchar;

fc=0;
for (fy=1;fy&lt;=3;fy++)  //draw normal keys
  {
     ft=string_length(uiRow[fy]);  //# of keys        
     for(fx=1;fx&lt;=ft;fx+=1)
        {   if curState=0 {curchar=string_char_at(uiRow[fy],fx);  }                               
                  else if curState=1 {curchar=string_char_at(uiRowShift[fy],fx);}                                 
                  else if curState=2 {curchar=string_char_at(uiRowAlt[fy],fx); }                                

            with (buttons[fc])
               {
                 uiTextValue=curchar;
                 uiMouseHandle=true; //safety on deactivate.
               }               
            fc+=1;         
        } //for each letter in the line string    
  }

  
back_key.uiMouseHandle=true; //safety on deactivate;    
enter_key.uiTextValue=uiEnterStr;    

with (state_key) 
 { if other.curState != 2 {uiTextValue=other.uiStateStr;} 
   else {uiTextValue=other.uiStateStrAlt;}}


   
   
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hide keyboard

//we need to re-enabled disabled controls;
isHiding=true; //flag closing flag


if guiSlide&gt;1 
  {
    with (ui_defaults)
      { uiMoveX=x;
        uiMoveY=y+other.guiSlide;
        uiAniMove=true;
      }    
    guiSlide=0;  
  }

//check to see if we are overlapping any other componets, if so then disable the mouse handle
     var l,t;
      l=ds_list_create();
      while 1{
        t = collision_rectangle(0,boardy,uiGUIWidth,boardy+boardh, ui_defaults, false, true);
        if t{ ds_list_add(l,t);
              instance_deactivate_object(t);
              t.uiMouseHandle=true;             //re-enable mouse handler;
            }
        else break;
             }
           
      for(t=0;t&lt;ds_list_size(l);t+=1)
        { instance_activate_object(ds_list_find_value(l,t)); }
      ds_list_destroy(l);
      
uiMoveY=uiGUIHeight+10;
uiAniMove=true;
uiFadeOut=true;   

     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set keys and board

//create buttons;
var fx,fy,fs,fl,fh,fc,ft,curx,cury,curchar,curid;

xfc= uiGUIWidth / 800;    //xfactor 
yfc= uiGUIHeight / 600;   //yfactor for scaling



boardy=(uiGUIHeight - (uiKeyboardHeight*yfc));
boardh=(uiKeyboardHeight*yfc);

butheight=boardh div 4 ;
butwidth=((uiGUIWidth-(uiRowStartX[1] *xfc)) div (string_length(uiRow[1])+1)) - (uiRowSpacingX[1]*xfc);

curid=self.id;

x=0;
xstart=0;
y=boardy;
ystart=boardy;
uiSetWidth=uiGUIWidth;
uiSetHeight=boardh;
depth=uiSetDepth+1;     
uiVisible=false;


fc=0;
for (fy=1;fy&lt;=3;fy+=1)  //draw normal keys
  {
     ft=string_length(uiRow[fy]);  //# of keys        
     curx=uiRowStartX[fy]*xfc;
//     cury=(boardy + ((fy-1) * (boardh div 4) + (linespacing*yfc)) * yfc;     //set y  and line spacing   
     cury=(boardy + ((fy-1) * (boardh div 4) + (linespacing*yfc)));     //set y  and line spacing   
     uiRowStartY[fy]=cury;      
     for(fx=1;fx&lt;=ft;fx+=1)
        {   if curState=0 {curchar=string_char_at(uiRow[fy],fx);}                                 
                  else if curState=1 {curchar=string_char_at(uiRowShift[fy],fx);}                                 
                  else if curState=2 {curchar=string_char_at(uiRowAlt[fy],fx);}                                 
            //if curchar='#' curchar='\#';
            with (buttons[fc])
               {
                 x=curx;
                 xstart=x;
                 y=cury;
                 ystart=y;
                 uiTextValue=curchar;
                 uiAlign=fa_center;
                 uiAlignV=fa_middle;
                 depth=other.uiSetDepth-fy;
                 uiSetWidth=other.butwidth;
                 uiSetHeight=other.butheight;
                 uiControlName='key';
                 canfocus=false;
                 uiEventObject=curid;
                 uiEnforceFocus=false;  //work on move finger...
                 uiFont=other.uiFont;
                 uiAnchor=curid;
                 uiBackColor=other.uiKeyBackColor;
                 uiBackColor2=other.uiKeyBackColor2;
                 uiTextColor=other.uiKeyTextColor;
                 uiDownColor=other.uiKeyDownColor;  
                 uiTouchKey=other.uiTouchKey;
                 uiBackScale=other.uiBackScale;
                 uiButtonSprite=other.uiKeySprite;
                 uiSpriteScale=other.uiKeySpriteScale;
               }               
            curx+=butwidth+(uiRowSpacingX[fy]*xfc);   
            fc+=1;         
        } //for each letter in the line string    
  }

  
//draw special keys
     cury=(boardy + (3 * (boardh div 4) + (linespacing*yfc)));     //set y  and line spacing   
     uiRowStartY[4]=cury;      

  butheight -= 12;     
  //back key
  curx=(805*xfc)-butwidth-(10*xfc);
  cury=uiRowStartY[1]+6;
  butwidth=butwidth;
  with (back_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=other.uiBackStr;          
      depth=other.uiSetDepth;      
      uiEventObject=curid;
      uiControlName='back';
      canfocus=false;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiSKeyBackColor;
      uiBackColor2=other.uiSKeyBackColor2;
      uiTextColor=other.uiSKeyTextColor;
      uiDownColor=other.uiSKeyDownColor;                                                 
     
      if other.uiBackStr='' 
         {uiButtonSprite= spr_ui;
          uiSpriteIndex=6; 
         } 
      uiHoverMode=0;   
      
    }  
       
       
  //shift key
  curx=3*xfc;
  cury=uiRowStartY[3]+6;
  butwidth=110 * xfc;
  with (shift_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=other.uiShiftStr;          
      depth=other.uiSetDepth;      
      uiControlName='shift';
      canfocus=false;
      uiEventObject=curid;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiSKeyBackColor;
      uiBackColor2=other.uiSKeyBackColor2;
      uiTextColor=other.uiSKeyTextColor;
      uiDownColor=other.uiSKeyDownColor;   
      if other.uiShiftStr='' 
         {uiButtonSprite= spr_ui;
          uiSpriteIndex=8; 
         }                                               
      uiHoverMode=0;

    }  
        
  //space key
  curx=150*xfc;
  cury=uiRowStartY[4]+2;
  butwidth=500 * xfc;
  with (space_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=' ';          
      depth=other.uiSetDepth;      
      uiEventObject=curid;
      uiControlName='key';
      canfocus=false;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiKeyBackColor;
      uiBackColor2=other.uiKeyBackColor2;
      uiTextColor=other.uiKeyTextColor;
      uiDownColor=other.uiKeyDownColor;                                                 
       
    }      

  //enter key
  curx=685*xfc;
  cury=uiRowStartY[2]+6;
  butwidth=110 * xfc;
  with (enter_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=other.uiEnterStr;          
      depth=other.uiSetDepth;      
      uiEventObject=curid;
      uiControlName='enter';
      canfocus=false;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiSKeyBackColor;
      uiBackColor2=other.uiSKeyBackColor2;
      uiTextColor=other.uiSKeyTextColor;
      uiDownColor=other.uiSKeyDownColor;        
      
      if other.uiEnterStr='' 
         {uiButtonSprite= spr_ui;
          uiSpriteIndex=7; 
         }                                               
      uiHoverMode=0;       
    }     
         
  //state key
  curx=3*xfc;
  cury=uiRowStartY[4]+6;
  butwidth=100 * xfc;
  with (state_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=other.uiStateStr;          
      depth=other.uiSetDepth;      
      uiEventObject=curid;
      uiControlName='state';
      canfocus=false;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiSKeyBackColor;
      uiBackColor2=other.uiSKeyBackColor2;
      uiTextColor=other.uiSKeyTextColor;
      uiDownColor=other.uiSKeyDownColor;
      uiHoverMode=0;       
    }       
     
  //hide key
  curx=720*xfc;
  cury=uiRowStartY[4]+6;
  butwidth=78 * xfc;
  with (hide_key) 
    {
      x=curx;xstart=x;
      y=cury;ystart=y;
      uiSetWidth=other.butwidth;
      uiSetHeight=other.butheight;
      uiTextValue=other.uiHideStr;          
      depth=other.uiSetDepth;      
      uiEventObject=curid;
      uiControlName='hide';
      canfocus=false;
      uiEnforceFocus=false;  //work on move finger...
      uiFont=other.uiFont;
      uiAnchor=curid;
      uiBackColor=other.uiSKeyBackColor;
      uiBackColor2=other.uiSKeyBackColor2;
      uiTextColor=other.uiSKeyTextColor;
      uiDownColor=other.uiKeyBackColor;    
      uiDrawBackColor=false;
      if other.uiHideStr='' 
         {uiButtonSprite= spr_ui;
          uiSpriteIndex=4; 
         } 
      uiHoverMode=0;         
    }       


y=room_height+10;     //move keyboard offscreen
     
     
     
     
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keypressed event
var curk,stime;

curk=other.uiTextValue;
if curk='\#' then {curk='#'; } //stupid #

if object_get_name(uiFocusID.object_index) != 'ui_editbox' {exit;}


if other.uiControlName='key'
     {
       with (uiFocusID)
           { keyboard_press=curk;     
             event_user(1);} //call keypress on editbox;
       if cap_lock=false &amp;&amp; curState=1 
           {curState=0;  //reset shift      
            event_user(3);
           } 
     }  
else if other.uiControlName='back'
     {
       with (uiFocusID)
           { keyboard_press='back';     
             event_user(1); //backspace
           }
     }   
else if other.uiControlName='enter'
     {
       with (uiFocusID)
           { keyboard_press='enter';     
             event_user(1); //enter/next
           }
      event_user(6);  //enter pressed;     
     }       
else if other.uiControlName='shift'
     {
     //see if dbl-click
     stime=get_timer()-last_stime;
     if (stime)&lt;500000 {cap_lock=true;curState=0;} else {cap_lock=false; last_stime=get_timer();}
     if curState=0 {curState=1;} else {curState=0;}
     event_user(3); //refresh;     
     }          
else if other.uiControlName='state'
     {
     if curState!=2 {curState=2;} else {if cap_lock {curState=1;} else {curState=0;}}
     event_user(3); //refresh;     
     }          
else if other.uiControlName='hide'
     {
            event_user(2); //hide
     }   
     

     

       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(5); //destroy all intances
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming    

var ymargin,disptx,px,py;
                  
disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


px=x;
py=y;

if (uiDrawBackColor)  
   {
    draw_set_color(uiBackColor);  
    if uiBackColor2==0 uiBackColor2=uiBackColor;
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,uiBackColor,uiBackColor2,uiDrawOutline);   //fill
   }   
   
if cap_lock
   { shift_key.drawpress=true; } 


      
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
