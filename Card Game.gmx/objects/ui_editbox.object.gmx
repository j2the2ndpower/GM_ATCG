<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


event_inherited();
uiInLineEditing=true;
uiGetNumber=false;
uiTextLimit=999;
uiTextColor=c_black;
uiFocusColor=c_gray;
uiFocusTextColor=c_white;
uiLabelTextColor=c_white;
uiCursorColor=c_white;
uiCursorWidth=6;
uiPopupKeyboard=true;
uiPopupOnly=false; //only accept keys from popup keyboard (limit characters);
curCursorPulse=1;
curCursorSpeed=0.05;
max_dispchars=0;
repeat_delay = 2;
repeat_last = 0;


inForm=true;
cursor_pos = -1;
start_pos = 0;
set_mouse_pos = -1;  //used on mouse event to set cursor.
keyboard_lasttab=false;  //workaround
keyboard_press='';  // from keyboard

keyboard_string=''; //reset keyboard buffer... 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiRefresh
  {  uiRefresh=false;
     if isFocused &amp;&amp; uiPopupKeyboard 
      with (ui_keyboard)
         { //if other.uiTabOrder&gt;0 {uiEnterStr='Next';}
           uiKeyboardShow=true; 
         }  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not isFocused exit;  //we have focus?
if uiPopupOnly exit;   //only accept input from popup


var curtab;
repeat_last -=1;


if repeat_last&lt;=0
{
 switch (keyboard_key)
    {
    case vk_backspace  : uiTextValue = string_delete(uiTextValue,cursor_pos,1); 
                         if cursor_pos&gt;0 cursor_pos -=1;
                         if start_pos&gt;0 start_pos-=1;
                         break;

    case vk_delete     : uiTextValue = string_delete(uiTextValue,cursor_pos+1,1); 
                         //cursor_pos -=1;
                         break;
                         
    case vk_left       : if cursor_pos&gt;0 {cursor_pos -=1;} 
                         break;
                             
    case vk_right      : if cursor_pos&lt;string_length(uiTextValue) cursor_pos +=1;
                         break;
                         
    case vk_home       : cursor_pos=0;start_pos=0;
                         break;

    case vk_end        : cursor_pos=string_length(uiTextValue);
                         break;                                   
                         
    } //switch    
 repeat_last=repeat_delay;   
}    


            
if keyboard_string != '' 
        {
         //keyboard_string=string_replace_all(keyboard_string,"#","\#");        
         uiTextValue= string_insert(keyboard_string,uiTextValue,cursor_pos+1);  //bug can't reset keyboard_lastchar so I use string...weird
         cursor_pos +=string_length(keyboard_string);
         keyboard_string='';
        }


if string_length(uiTextValue)&gt;uiTextLimit uiTextValue=string_copy(uiTextValue,1,uiTextLimit);

//little safety;
if cursor_pos&gt;string_length(uiTextValue) cursor_pos=string_length(uiTextValue);
if cursor_pos&lt;0 cursor_pos=0;

if cursor_pos&lt;start_pos then {start_pos=cursor_pos;}
    
  
if start_pos&lt;0 start_pos=0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

event_inherited();

if cursor_pos=-1 cursor_pos=string_length(uiTextValue);  //set initial curpos pos 
if set_mouse_pos=-1 set_mouse_pos=mouse_x-x;
keyboard_lasttab=false;  
keyboard_string=''; //reset keyboard buffer...    
                                               //this will set the mousepos x for the draw event to update the cursor.
                                               

if uiEventObject== noone //no event object so we do standard get_string_async
{
  if uiInLineEditing==false
    {
      with (ui_defaults) {uiMouseHandle=false};  //disable all mouse controls on other events        
      if uiGetNumber==false {uitextboxmsg=get_string_async(uiTextLabel,uiTextValue);}
      else {uitextboxmsg=get_integer_async(uiTextLabel,uiTextValue);}       
    }  
} else //has event object
  {
    var evNum;
    evNum=uiEventNum;
    if uiEventObject != noone
     if object_exists(uiEventObject) then
       with (uiEventObject) 
        {if evNum&gt;=0 event_user(evNum); }  

  }
 
//need to set all other components to be inForm aware..overwrite, keypress...etc
with (ui_defaults) {inForm=true;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (ui_defaults) {uiMouseHandle=true}; 


var i_d = ds_map_find_value(async_load, "id");


 if i_d == uitextboxmsg
    {
    if ds_map_find_value(async_load, "status")
       {
          {
          if uiGetNumber==false
            { testvalue = ds_map_find_value(async_load, "result");
              if testvalue != '' uiTextValue=testvalue;
            } else
            {
              testvalue = ds_map_find_value(async_load, "value");
              uiTextValue = string(testvalue);          
            }   
          modified = true;
          if object_exists(uiEventObject) then      //we call the statechanged event on controller if set
             with (uiEventObject) {event_user(0);}
          }
       }
    }
uitextboxmsg= -1;    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///from keyboard

if keyboard_press='' exit;

var curtab;

if keyboard_press='back'
          { uiTextValue = string_delete(uiTextValue,cursor_pos,1); 
            if cursor_pos&gt;0 cursor_pos -=1;
            if start_pos&gt;0 start_pos-=1;
            keyboard_press='';
          }

if keyboard_press='enter'  //next or enter
           {          
              curtab=uiTabOrder+1;
              if (curtab&gt;0)
                 with (ui_defaults)
                   {
                   if uiTabOrder=curtab event_user(0);  //select focused..  //event_perform(ev_mouse,ev_left_press);                           
                   }          
            keyboard_press='';       
           }                
    
if keyboard_press != ''            
        {
         keyboard_press=string_replace_all(keyboard_press,"#","\#")        
         uiTextValue= string_insert(keyboard_press,uiTextValue,cursor_pos+1);  //bug can't reset keyboard_lastchar so I use string...weird
         cursor_pos +=string_length(keyboard_press);
         keyboard_press='';
        }

if string_length(uiTextValue)&gt;uiTextLimit uiTextValue=string_copy(uiTextValue,1,uiTextLimit);

//little safety;
if cursor_pos&gt;string_length(uiTextValue) cursor_pos=string_length(uiTextValue);
if cursor_pos&lt;0 cursor_pos=0;

if cursor_pos&lt;start_pos then {start_pos=cursor_pos;}
    
  
if start_pos&lt;0 start_pos=0;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Focus
//called when using tab/shift-tab
//will set itself as focused and remove all others.


var curID;
curID=self.id;
with (ui_defaults)
{
uiFocusID=curID;                      //will set the focus object.
isFocused=false;
uiRefresh=true;   //will refersh all ui (close comboboxes for example)...
}

isFocused=true;
cursor_pos=string_length(uiTextValue);
keyboard_string=''; //reset keyboard buffer...


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Copyright (c) 2013 NailBuster Software Inc.  all rights reserved.
/**********************

  This source code is provided 'as-is', without any express or implied warranty. 
  In no event will NailBuster Software Inc. be held liable for any damages arising from the use of this software.

      Permission is granted to use these components for non commercial applications, and to alter it for your needs,
    subject to the following restrictions:
    
  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original source code 
     or components. If you use this software in a application, an acknowledgment in the product about/documentation would be appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
     You cannot distribute your modified sources of our component suite outside of your company.
  3. You cannot use this source or components in a tool or package designed to compete with NailBuster GUI component Suite. 
     For example,  you cannot modify and/or  improve these components and release under another component suite name.
  4. You cannot redistribute these source files outside of your compiled projects. All original Sources Files/Documentation 
     must originate from NailBuster Software Inc.  You cannot host or redistribute these source files. 
  
  If your application is used for commercial purposes, and will generate revenue directly or indirectly then you are required to 
  purchase a commercial license from NailBuster Software Inc.  Please visit www.nailbuster.com for purchasing information.
  If you have any questions about the license please contact us at david@nailbuster.com

**********************/


var ymargin,disptx,px,tmpc,tmpch,curcol;


event_inherited();

if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     


draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);

if not isFocused {start_pos=0;cursor_pos=-1;set_mouse_pos=-1;}


disptx=string_copy(uiTextValue,start_pos+1,cursor_pos-start_pos);   
disptx=string_replace_all(disptx,"#","\#")

while (string_width(disptx) &gt; sprite_width-string_width('X')-5)
  {
    start_pos+=1;
    disptx=string_copy(uiTextValue,start_pos+1,cursor_pos+1);
    disptx=string_replace_all(disptx,"#","\#")
  }  



px=0;
tmpc=start_pos;  
disptx='';
while (px&lt;(sprite_width-string_width('X')-5)) &amp;&amp; (tmpc&lt;=string_length(uiTextValue))
     {
       tmpch=string_char_at(uiTextValue,tmpc+1);
       disptx += tmpch;
       if tmpch='#' tmpch='\#';   //stupid # symbol
       px += string_width(tmpch);          
       tmpc+=1;      
       
       //check mouse cursor set
       if set_mouse_pos&gt;0 { if px&gt;=set_mouse_pos then
                                              {cursor_pos=tmpc-1;
                                               set_mouse_pos=-1; //reset mouse cursor;
                                              }
                          } 
     }    

     
if set_mouse_pos&gt;0 {cursor_pos=tmpc-1;set_mouse_pos=-1;};  //if mouse cursor set.          

if uiPasswordChar != '' then disptx = string_repeat(uiPasswordChar,string_length(disptx))

if isFocused curcol=uiFocusColor else 
             curcol=uiBackColor;  
              
              


//draw_text_transformed(5,5,string(cursor_pos),uiXscale,uiYscale,0);             

draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,curcol,curcol, false);   //fill

disptx=string_replace_all(disptx,"#","\#")
ymargin= (sprite_height - (string_height(disptx) * uiYscale)) div 2 ;



if uiAlign==fa_left { px=x +5; } 
 else if uiAlign==fa_middle {px= x + (sprite_width div 2); }
   else if uiAlign==fa_right {px = x+sprite_width -5; } 
 
if isFocused draw_set_color(uiFocusTextColor) else 
             draw_set_color(uiTextColor);  

draw_text_transformed(px,y + ymargin,disptx,uiXscale,uiYscale,0);   

disptx=string_replace_all(disptx,"\#","#"); //stupid # symbol again

//draw cursor
if isFocused 
 {
   px=0;
   tmpc=start_pos;
   while tmpc&lt;cursor_pos
     {
       tmpch=string_char_at(disptx,tmpc-start_pos+1);  //crazy and stupid #
       if tmpch='#' tmpch='\#';
       px += string_width(tmpch);   
       tmpc+=1; 
     }
     curCursorPulse += curCursorSpeed;
     if curCursorPulse &gt; 1 {curCursorSpeed *= -1;}
        else if curCursorPulse &lt; 0.3 {curCursorSpeed *= -1;}          
     tmpc=draw_get_alpha();   
     draw_set_alpha(curCursorPulse);              
     draw_set_color(uiCursorColor);
     if px&gt;sprite_width-10 px=sprite_width - uiCursorWidth;
     draw_rectangle(x+px+5,y,x+px+uiCursorWidth,y+sprite_height,false);
     draw_set_alpha(tmpc);     
}
      

if uiTextLabel !=''     //if label
    {
       px=x-string_width('X');  //10 pixels prior to editbox;    
       draw_set_color(uiLabelTextColor);
       draw_set_halign(fa_right);
       ymargin= (sprite_height - (string_height(uiTextLabel) * uiYscale)) div 2 ;
       draw_text(px,y+ymargin,uiTextLabel);            
    }









</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not isFocused then exit;
if uiPopupOnly exit;   //only accept input from popup


var curtab;
if (keyboard_key=vk_tab)
    {

                         if keyboard_check_direct(vk_shift) then curtab=uiTabOrder-1;
                                                            else curtab=uiTabOrder+1;
                         if (curtab&gt;0) &amp;&amp; (keyboard_lasttab=false)  //tab order is default 0;                                   
                         with (ui_defaults)
                           {
                           if uiTabOrder=curtab event_user(0);  //select focused..  //event_perform(ev_mouse,ev_left_press);                           
                           keyboard_lasttab=true;
                           }
     repeat_last=repeat_delay;   
    } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not isFocused exit;  //we have focus?
if uiPopupOnly exit;   //only accept input from popup


repeat_last=0; //reset delay keypress
keyboard_lasttab=false;

//debug





//var curtab;
//if (keyboard_lastkey=vk_tab)
//    {
//     keyboard_lastkey=-1;
    //see if tab order increase exists;
//                         if keyboard_check_direct(vk_shift) then curtab=uiTabOrder-1;
//                                                            else curtab=uiTabOrder+1;
//                         if curtab&gt;1  //tab order is default 0;                                   
//                         with (ui_defaults)
//                           {
//                           if uiTabOrder=curtab event_perform(ev_mouse,ev_left_press);                           
//                           }
//     repeat_last=repeat_delay;   
//    } 
//else {
 //      repeat_last=0; //reset delay keypress
//     }  

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
