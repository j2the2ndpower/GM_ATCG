<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tb_width = 100;
tb_height = 22;
tb_color = make_colour_rgb(212, 212, 212);
tb_value = "";
tb_cursorPos1 = 0;
tb_cursorPos2 = 0;
hasFocus = false;
tb_blink = 0;
tb_password = false;
tb_emptyText = "";
tb_font = fntDefaultTextBox;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_x &gt;= x &amp;&amp; mouse_x &lt;= (x+tb_width) &amp;&amp; mouse_y &gt;= y &amp;&amp; mouse_y &lt;= (y+tb_height)) {
    script_setFocus(id);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(tb_font);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_colour(tb_color);
draw_roundrect(x, y, x + tb_width, y + tb_height, false);
var fontColor = make_colour_rgb(24, 24, 24);

var drawText = tb_value;
if (tb_password) {
    drawText = string_repeat("*", string_length(tb_value));
}

if (hasFocus == true) {
    if (++tb_blink &lt; 15) {    
        var cursorX = string_width(string_copy(drawText, 0, tb_cursorPos1));
        draw_set_colour(fontColor);
        
        draw_line(x + 3 + cursorX, y + 2, x + 3 + cursorX, y + tb_height - 2);
    }
    
    if (tb_blink &gt;= 30) {
        tb_blink=0;
    }
}

if (tb_value != "") {
    draw_text_colour(x+3, y+2, drawText, fontColor, fontColor, fontColor, fontColor, 1);
} else {
    draw_text_colour(x+3, y+2, tb_emptyText, fontColor, fontColor, fontColor, fontColor, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var key = keyboard_key;
var char = keyboard_string;

if (!hasFocus) {
    exit;
}
    
if (key == vk_home) {
    if (keyboard_check(vk_shift)) {
        tb_cursorPos2 = 0;
    } else {
        tb_cursorPos1 = tb_cursorPos2 = 0;
    }
}

if (key == vk_end) {
    if (keyboard_check(vk_shift)) {
        tb_cursorPos2 = string_length(tb_value);
    } else {
        tb_cursorPos1 = tb_cursorPos2 = string_length(tb_value);
    }
}

if (key == vk_left) {
    tb_cursorPos2--;
    if (!keyboard_check(vk_shift)) {
        tb_cursorPos1--;
    }
}

if (key == vk_right) {
    tb_cursorPos2++;
    if (!keyboard_check(vk_shift)) {
        tb_cursorPos1++;
    }    
}

if (key == vk_backspace) {
    tb_value = string_copy(tb_value, 1, string_length(tb_value)-1);
}

if (tb_cursorPos1 &gt; string_length(tb_value)) {
    tb_cursorPos1 = string_length(tb_value);
}
if (tb_cursorPos2 &gt; string_length(tb_value)) {
    tb_cursorPos2 = string_length(tb_value);
}

if (char != "") {
    var leftPart = string_copy(tb_value, 1, tb_cursorPos1);
    var rightPart = string_copy(tb_value, tb_cursorPos1+1, string_length(tb_value)-tb_cursorPos1);
    tb_value = (leftPart + string(char) + rightPart);
    tb_cursorPos1++;
    tb_cursorPos2++;
    keyboard_string="";
}
keyboard_lastkey = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
